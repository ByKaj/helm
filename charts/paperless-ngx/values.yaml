# -----------------------------------------------------------------------------
# -- Global
# -----------------------------------------------------------------------------
# This is to override the chart name.
nameOverride: ""        # Defaults to <.Chart.Name>
fullnameOverride: ""    # Defaults to <.Release.Name>-<.Chart.Name>

# -----------------------------------------------------------------------------
# -- Configure Pods and Containers
# -----------------------------------------------------------------------------
containers:
  # Key of the container (e.g. app, db, broker). Used for naming objects.
  db:
    # Define the container as a initContainer.
    init:
      enabled: true
      restartPolicy: Always

    securityContext: {}

    # This sets the container image. 
    # Ref: https://kubernetes.io/docs/concepts/containers/images/
    image:
      repository: postgres
      # This sets the pull policy for images.
      pullPolicy: Always
      # Overrides the image tag. Default is the chart appVersion.
      tag: 16-alpine

    # This is for setting up a service
    # Ref: https://kubernetes.io/docs/concepts/services-networking/service/
    service:
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    - name: psql
      enabled: false
      port: 5432
      protocol: TCP
      ingress: false

    # This is to setup the liveness and readiness probes 
    # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    livenessProbe: {}
    readinessProbe: {}

    # Additional command line arguments for the container.
    args: []

    # Environment variables to pass to the deployed container. A specific ConfigMap is created.
    # @default -- `[]` (See [values.yaml])
    env:
    - name: PG_TZ
      value: Europe/Amsterdam
    - name: POSTGRES_DB
      value: paperless
    
    # Use ConfigMap from another container (key). Overrides `env`.
    # @default -- `""` (See [values.yaml])
    envUse: ""

   # Secret variables to pass to the deployed container. A specific Secret is created.
   # @default -- `[]` (See [values.yaml])
    secret:
    - name: POSTGRES_USER
      value: paperless
    - name: POSTGRES_PASSWORD
      value: Pl3@s3Ch@ng3M3!

    # Use ConfigMap from another container (key). Overrides `secret`.
    # @default -- `""` (See [values.yaml])
    secretUse: ""

    # Additional volumeMounts on the output Deployment definition.
    volumeMounts:
    - mountPath: /var/lib/postgresql/data
      readOnly: false
      name: config
      subPath: postgresql

    resources: {}

  broker:
    # Define the container as a initContainer.
    init:
      enabled: true
      restartPolicy: Always

    securityContext: {}

    # This sets the container image. 
    # Ref: https://kubernetes.io/docs/concepts/containers/images/
    image:
      repository: redis
      # This sets the pull policy for images.
      pullPolicy: Always
      # Overrides the image tag. Default is the chart appVersion.
      tag: alpine

    # This is for setting up a service
    # Ref: https://kubernetes.io/docs/concepts/services-networking/service/
    service:
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    - name: redis
      enabled: false
      port: 6379
      protocol: TCP
      ingress: false

    # This is to setup the liveness and readiness probes 
    # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    livenessProbe: {}
    readinessProbe: {}

    # Additional command line arguments for the container.
    args:
    - "--loglevel warning"

    # Environment variables to pass to the deployed container. A specific ConfigMap is created.
    # @default -- `[]` (See [values.yaml])
    env: []
    
    # Use ConfigMap from another container (key). Overrides `env`.
    # @default -- `""` (See [values.yaml])
    envUse: ""

   # Secret variables to pass to the deployed container. A specific Secret is created.
   # @default -- `[]` (See [values.yaml])
    secret: []

    # Use ConfigMap from another container (key). Overrides `secret`.
    # @default -- `""` (See [values.yaml])
    secretUse: ""

    # Additional volumeMounts on the output Deployment definition.
    volumeMounts:
    - mountPath: /data
      readOnly: false
      name: config
      subPath: redis

    resources: {}

  app:
    # Define the container as a initContainer.
    init:
      enabled: false
      restartPolicy: Always

    securityContext: {}

    # This sets the container image. 
    # Ref: https://kubernetes.io/docs/concepts/containers/images/
    image:
      repository: ghcr.io/paperless-ngx/paperless-ngx
      # This sets the pull policy for images.
      pullPolicy: Always
      # Overrides the image tag. Default is the chart appVersion.
      tag: ""

    # This is for setting up a service
    # Ref: https://kubernetes.io/docs/concepts/services-networking/service/
    service:
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    - name: http
      enabled: true
      port: 8000
      protocol: TCP
      ingress: true

    # This is to setup the liveness and readiness probes 
    # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    livenessProbe:
      httpGet:
        path: /
        port: 8000
      initialDelaySeconds: 15
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /
        port: 8000
      initialDelaySeconds: 15
      periodSeconds: 10

    # Additional command line arguments for the container.
    args: []

    # Environment variables to pass to the deployed container. A specific ConfigMap is created.
    # @default -- `[]` (See [values.yaml])
    env:
    - name: USERMAP_UID
      value: "0"
    - name: USERMAP_GID
      value: "0"
    - name: POSTGRES_DB
      value: paperless
    - name: PAPERLESS_REDIS
      value: redis://localhost:6379
    - name: PAPERLESS_DBHOST
      value: localhost
    - name: PAPERLESS_URL
      value: https://paperless.domain.tld
    - name: PAPERLESS_TIME_ZONE
      value: Europe/Amsterdam
    - name: PAPERLESS_OCR_LANGUAGE
      value: nld+eng
    - name: PAPERLESS_OCR_LANGUAGES
      value: nld
    - name: PAPERLESS_FILENAME_FORMAT
      value: "{ created }-{ correspondent }-{ title }"

    # Use ConfigMap from another container (key). Overrides `env`.
    # @default -- `""` (See [values.yaml])
    envUse: ""

   # Secret variables to pass to the deployed container. A specific Secret is created.
   # @default -- `[]` (See [values.yaml])
    secret:
    - name: POSTGRES_USER
      value: paperless
    - name: POSTGRES_PASSWORD
      value: Pl3@s3Ch@ng3M3!
    - name: PAPERLESS_SECRET_KEY
      value: Pl3@s3Ch@ng3M3!
    - name: PAPERLESS_API_KEY
      value: Pl3@s3Ch@ng3M3!

    # Use ConfigMap from another container (key). Overrides `secret`.
    # @default -- `""` (See [values.yaml])
    secretUse: ""

    # Additional volumeMounts on the output Deployment definition.
    volumeMounts:
    - mountPath: /usr/src/paperless/data
      name: config
      subPath: paperless
    - mountPath: /usr/src/paperless/media
      readOnly: false
      name: archive
      subPath: media
    - mountPath: /usr/src/paperless/consume
      readOnly: false
      name: archive
      subPath: consume
    - mountPath: /usr/src/paperless/export
      readOnly: false
      name: archive
      subPath: export

    resources: {}

# This is for the secrets for pulling an image from a private repository
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# This is for setting Kubernetes Annotations to a Pod.
# Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}

# This is for setting Kubernetes Labels to a Pod.
# Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

# -----------------------------------------------------------------------------
# -- Security
# -----------------------------------------------------------------------------
# This section builds out the service account.
# Ref: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -----------------------------------------------------------------------------
# -- Services, Load Balancing, and Networking
# -----------------------------------------------------------------------------
# Define the pods DNS configuration. 
# Ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-dns-config
dnsConfig:
  options:
  - name: ndots
    value: "1"

# This is for setting up a service.
# Ref: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  type: ClusterIP

# This block is for setting up the Traefik ingress. 
# Ref: https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/#kind-ingressroutetcp
ingress:
  enabled: true

  # Kind of ingress route (IngressRoute or IngressRouteTCP).
  # @default -- 'IngressRoute' (See [values.yaml])
  kind: IngressRoute

  # Domainnames (format: - <domain>.<tld>).
  domains:
  - domain.tld

  # Override the subdomain.
  # @default -- '""' (See [values.yaml])
  subdomainOverride: ""

  # Entry point of the route.
  # @default -- 'websecure' (See [values.yaml])
  entryPoints:
  - websecure

  # Attach middlewares to ingress route
  # These need to be present within the namespace
  # @default -- `secure-headers` (See [values.yaml])
  middlewares:
  - secure-headers

  # The TLS secretName for the certificate 
  # Defaults to the Traefik wildcard certificate when ommited
  # @default -- '""' (See [values.yaml])
  tlsSecret: ""
  
  # Ingress annotations.
  annotations: {}

# -----------------------------------------------------------------------------
# -- Storage
# -----------------------------------------------------------------------------
# When mounting volumes to the pod, define the secret and namespace where the credentials are located. For now only needed for SMB.
credentials:
  smb:
    secret: smb-credentials
    namespace: default

# Additional volumes on the output Deployment definition.
# Longhorn as storage required.
volumes:
- name: config
  className: longhorn
  accessModes: 
  - ReadWriteOnce
  storage: 3Gi
  source: ""
- name: archive
  className: smb
  accessModes: 
  - ReadWriteMany
  storage: 100Gi
  source: //SERVER/Archive

# -----------------------------------------------------------------------------
# -- Scheduling, Preemption and Eviction
# -----------------------------------------------------------------------------
# Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
nodeSelector: {}

# Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
tolerations: []

# Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

# -----------------------------------------------------------------------------
# -- Workloads
# -----------------------------------------------------------------------------
# This will set the replicaset count. 
# Ref: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This section is for setting up autoscaling. 
# Ref: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false