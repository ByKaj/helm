# -----------------------------------------------------------------------------
# -- Global
# -----------------------------------------------------------------------------
# This is to override the chart name.
nameOverride: ""        # Defaults to <.Chart.Name>
fullnameOverride: ""    # Defaults to <.Release.Name>-<.Chart.Name>

global:
  # Local timezone
  # @default -- "Europe/Amsterdam"
  timezone: Europe/Amsterdam

  # Storage request for the config folder
  configStorage: 3Gi

  # Change to the amount of agent nodes used for storage
  configReplicas: 3

  # Source for your documents folder
  source: //SERVER/Archive

  # Database name
  # @default -- "paperless"
  databaseName: paperless

  # Database username
  # @default -- "paperless"
  databaseUsername: paperless

  # Database password
  # @default -- "Pl3@s3Ch@ng3M3!"
  databasePassword: Pl3@s3Ch@ng3M3!

  # Admin user credentials
  # Automatically creates a superuser with the provided username and password
  paperlessAdminUsername: admin
  paperlessAdminPassword: Pl3@s3Ch@ng3M3!

  # Paperless URL
  # @default -- "https://paperless.example.com"
  paperlessUrl: https://paperless.example.com

  # Customize the language that Paperless will attempt to use when parsing documents
  # @default -- "eng"
  paperlessOcrLanguage: eng

  # Install languages not installed by default
  # @default -- ""
  paperlessOcrLanguages: ""

  # Filename format
  # @default -- "{ created }-{ correspondent }-{ title }"
  paperlessFilenameFormat: "{ created }-{ correspondent }-{ title }"

  # Secret key for encryption
  paperlessSecretKey: SecretKeyOf50+Char

  # Global API key
  paperlessApiKey: ApiKeyOf40+Char

  # Poll frequency (in minutes) of the `consume` folder
  paperlessConsumerPolling: "15"

  # When using a SSO provider: configuration
  # @default -- ""
  paperlessApps: ""
  paperlessSocialAccountProviders: ""

  # When using a SSO provider: disable regular login
  # @default -- "false"
  paperlessDisableRegularLogin: "false"

  # When using a SSO provider: redirect login to SSO
  # @default -- "false"
  paperlessRedirectLoginToSso: "false"

  # URL to redirect the user to after a logout
  # @default -- "None"
  paperlessLogoutRedirectUrl: "None"

# -----------------------------------------------------------------------------
# -- Configure Pods and Containers
# -----------------------------------------------------------------------------
containers:
  # Key of the container (e.g. app, db, broker). Used for naming objects.
  db:
    # Define the container as a initContainer.
    init:
      enabled: true
      restartPolicy: Always

    securityContext: {}

    # This sets the container image. 
    # Ref: https://kubernetes.io/docs/concepts/containers/images/
    image:
      repository: postgres
      # This sets the pull policy for images.
      pullPolicy: Always
      # Overrides the image tag. Default is the chart appVersion.
      tag: 16-alpine

    # This is for setting up a service
    # Ref: https://kubernetes.io/docs/concepts/services-networking/service/
    service:
      # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
      psql:
        enabled: false
        port: 5432
        protocol: TCP
        ingress: false

    # This is to setup the liveness and readiness probes 
    # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    livenessProbe: {}
    readinessProbe: {}

    # Additional command line arguments for the container.
    args: []

    # Environment variables to pass to the deployed container. A specific ConfigMap is created.
    # @default -- `[]` (See [values.yaml])
    env:
      PG_TZ: "{{ .Values.global.timezone }}"
      POSTGRES_DB: "{{ .Values.global.databaseName }}"
    
    # Use ConfigMap from another container (key). Overrides `env`.
    # @default -- `""` (See [values.yaml])
    envUse: ""

    # Secret variables to pass to the deployed container. A specific Secret is created.
    # @default -- `[]` (See [values.yaml])
    secret:
      POSTGRES_USER: "{{ .Values.global.databaseUsername }}"
      POSTGRES_PASSWORD: "{{ .Values.global.databasePassword }}"

    # Use ConfigMap from another container (key). Overrides `secret`.
    # @default -- `""` (See [values.yaml])
    secretUse: ""

    # Additional volumeMounts on the output Deployment definition.
    volumeMounts:
      config:
        "postgresql": "/var/lib/postgresql/data"

    resources: {}

  broker:
    # Define the container as a initContainer.
    init:
      enabled: true
      restartPolicy: Always

    securityContext: {}

    # This sets the container image. 
    # Ref: https://kubernetes.io/docs/concepts/containers/images/
    image:
      repository: redis
      # This sets the pull policy for images.
      pullPolicy: Always
      # Overrides the image tag. Default is the chart appVersion.
      tag: alpine

    # This is for setting up a service
    # Ref: https://kubernetes.io/docs/concepts/services-networking/service/
    service:
      # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
      redis:
        enabled: false
        port: 6379
        protocol: TCP
        ingress: false

    # This is to setup the liveness and readiness probes 
    # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    livenessProbe: {}
    readinessProbe: {}

    # Additional command line arguments for the container.
    args:
      - "--loglevel warning"

    # Environment variables to pass to the deployed container. A specific ConfigMap is created.
    # @default -- `[]` (See [values.yaml])
    env: {}
    
    # Use ConfigMap from another container (key). Overrides `env`.
    # @default -- `""` (See [values.yaml])
    envUse: ""

    # Secret variables to pass to the deployed container. A specific Secret is created.
    # @default -- `[]` (See [values.yaml])
    secret: {}

    # Use ConfigMap from another container (key). Overrides `secret`.
    # @default -- `""` (See [values.yaml])
    secretUse: ""

    # Additional volumeMounts on the output Deployment definition.
    volumeMounts:
      config:
        "redis": "data"

    resources: {}

  app:
    # Define the container as a initContainer.
    init:
      enabled: false
      restartPolicy: Always

    securityContext: {}

    # This sets the container image. 
    # Ref: https://kubernetes.io/docs/concepts/containers/images/
    image:
      repository: ghcr.io/paperless-ngx/paperless-ngx
      # This sets the pull policy for images.
      pullPolicy: Always
      # Overrides the image tag. Default is the chart appVersion.
      tag: ""

    # This is for setting up a service
    # Ref: https://kubernetes.io/docs/concepts/services-networking/service/
    service:
      # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
      http:
        enabled: true
        port: 8000
        protocol: TCP
        ingress: true

    # This is to setup the liveness and readiness probes 
    # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    livenessProbe:
      httpGet:
        path: /
        port: 8000
      initialDelaySeconds: 15
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /
        port: 8000
      initialDelaySeconds: 15
      periodSeconds: 10

    # Additional command line arguments for the container.
    args: []

    # Environment variables to pass to the deployed container. A specific ConfigMap is created.
    # @default -- `[]` (See [values.yaml])
    # Ref: https://docs.paperless-ngx.com/configuration/
    env:
      USERMAP_UID: "0"
      USERMAP_GID: "0"
      PAPERLESS_DBNAME: "{{ .Values.global.databaseName }}"
      PAPERLESS_REDIS: redis://localhost:6379
      PAPERLESS_DBHOST: localhost
      PAPERLESS_URL: "{{ .Values.global.paperlessUrl }}"
      PAPERLESS_TIME_ZONE: "{{ .Values.global.timezone }}"
      PAPERLESS_OCR_LANGUAGE: "{{ .Values.global.paperlessOcrLanguage }}"
      PAPERLESS_OCR_LANGUAGES: "{{ .Values.global.paperlessOcrLanguages }}"
      PAPERLESS_FILENAME_FORMAT: "{{ .Values.global.paperlessFilenameFormat }}"
      PAPERLESS_CONSUMER_POLLING: "{{ .Values.global.paperlessConsumerPolling }}"
      PAPERLESS_APPS: "{{ .Values.global.paperlessApps }}"
      PAPERLESS_SOCIALACCOUNT_PROVIDERS: "{{ .Values.global.paperlessSocialAccountProviders }}"
      PAPERLESS_DISABLE_REGULAR_LOGIN: "{{ .Values.global.paperlessDisableRegularLogin }}"
      PAPERLESS_REDIRECT_LOGIN_TO_SSO: "{{ .Values.global.paperlessRedirectLoginToSso }}"
      PAPERLESS_LOGOUT_REDIRECT_URL: "{{ .Values.global.paperlessLogoutRedirectUrl }}"

    # Use ConfigMap from another container (key). Overrides `env`.
    # @default -- `""` (See [values.yaml])
    envUse: ""

    # Secret variables to pass to the deployed container. A specific Secret is created.
    # @default -- `[]` (See [values.yaml])
    # Ref: https://docs.paperless-ngx.com/configuration/
    secret:
      PAPERLESS_ADMIN_USER: "{{ .Values.global.paperlessAdminUsername }}"
      PAPERLESS_ADMIN_PASSWORD: "{{ .Values.global.paperlessAdminPassword }}"
      PAPERLESS_DBUSER: "{{ .Values.global.databaseUsername }}"
      PAPERLESS_DBPASS: "{{ .Values.global.databasePassword }}"
      PAPERLESS_SECRET_KEY: "{{ .Values.global.paperlessSecretKey }}"
      PAPERLESS_API_KEY: "{{ .Values.global.paperlessApiKey }}"

    # Use ConfigMap from another container (key). Overrides `secret`.
    # @default -- `""` (See [values.yaml])
    secretUse: ""

    # Additional volumeMounts on the output Deployment definition.
    volumeMounts:
      config:
        "paperless": "/usr/src/paperless/data"
      archive:
        "media": "/usr/src/paperless/media"
        "consume": "/usr/src/paperless/consume"
        "export": "/usr/src/paperless/export"

    resources: {}

# This is for the secrets for pulling an image from a private repository
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# This is for setting Kubernetes Annotations to a Pod.
# Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}

# This is for setting Kubernetes Labels to a Pod.
# Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

# -----------------------------------------------------------------------------
# -- Security
# -----------------------------------------------------------------------------
# This section builds out the service account.
# Ref: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -----------------------------------------------------------------------------
# -- Services, Load Balancing, and Networking
# -----------------------------------------------------------------------------
# Define the pods DNS configuration. 
# Ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-dns-config
dnsConfig:
  options:
    - name: ndots
      value: "1"

# This is for setting up a service.
# Ref: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  type: ClusterIP

# This block is for setting up the Traefik ingress. 
# Ref: https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/#kind-ingressroutetcp
ingress:
  enabled: true

  # Kind of ingress route (IngressRoute or IngressRouteTCP).
  # @default -- 'IngressRoute' (See [values.yaml])
  kind: IngressRoute

  # Domainnames (format: - <domain>.<tld>).
  domains:
    - example.com

  # Override the subdomain.
  # @default -- '""' (See [values.yaml])
  subdomainOverride: ""

  # Entry point of the route.
  # @default -- 'websecure' (See [values.yaml])
  entryPoints:
    - websecure

  # Attach middlewares to ingress route
  # These need to be present within the namespace
  # @default -- `secure-headers` (See [values.yaml])
  middlewares:
    - secure-headers

  # The TLS secretName for the certificate 
  # Defaults to the Traefik wildcard certificate when ommited
  # @default -- '""' (See [values.yaml])
  tlsSecret: ""
  
  # Ingress annotations.
  annotations: {}

# -----------------------------------------------------------------------------
# -- Storage
# -----------------------------------------------------------------------------
# When mounting volumes to the pod, define the secret and namespace where the credentials are located. For now only needed for SMB.
credentials:
  smb:
    secret: smb-credentials
    namespace: default

# Additional volumes on the output Deployment definition.
# Longhorn as storage required for persistent config store.
volumes:
  config:
    className: longhorn
    accessModes: 
      - ReadWriteOnce
    storage: "{{ .Values.global.configStorage }}"
    numberOfReplicas: "{{ .Values.global.configReplicas }}"
  archive:
    className: smb
    accessModes: 
      - ReadWriteMany
    storage: 100Gi
    source: "{{ .Values.global.source }}"

# -----------------------------------------------------------------------------
# -- Scheduling, Preemption and Eviction
# -----------------------------------------------------------------------------
# Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
nodeSelector: {}

# Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
tolerations: []

# Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

# -----------------------------------------------------------------------------
# -- Workloads
# -----------------------------------------------------------------------------
# This will set the replicaset count. 
# Ref: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This section is for setting up autoscaling. 
# Ref: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
